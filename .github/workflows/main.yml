name: Build NPM Package and python package
on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

permissions:
  checks: write
  contents: read
  packages: read
env:
  API_URL: 'https://app.stage.veribom.com'

jobs:
  create_scan_in_IR_Portal:
    runs-on: ubuntu-latest
    outputs:
      scan_id: ${{ steps.parseResponse.outputs.scan_id }}
    steps:
      - name: Initiating SBOM Scan
        id: createScan
        uses: fjogeleit/http-request-action@v1.15.1
        with:
          url: '${{env.API_URL}}/utilityapi/v1/scan'
          method: 'POST'
          data: '{"api_key": "${{secrets.VB_API_KEY}}", "source": "GITHUB_ACTIONS_WITH_PROXY"}'
      - name: Parse Response
        id: parseResponse
        run: echo "scan_id=${{fromJSON(steps.createScan.outputs.response).data.scan_id}}" >> "$GITHUB_OUTPUT"
      #- name: Print GITHUB_RUN_RESULT
        #run: echo "GITHUB_RUN_RESULT: ${{ process.env.GITHUB_RUN_RESULT }}" >> $GITHUB_ENV
  
  build_python:
    runs-on: ubuntu-latest
    needs: create_scan_in_IR_Portal
    services:
      pse:
        image: kkisalaya/pse-proxy:dev
        env:
          PSE_DEBUG_FLAG: --alsologtostderr
          POLICY_LOG: t
          INVISIRISK_JWT_TOKEN: ${{secrets.VB_API_KEY}} 
          INVISIRISK_PORTAL: https://app.stage.veribom.com/
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} 
    container:
      image: python:3.10-alpine
      options: --cap-add=NET_ADMIN
    steps:
    - env:
        SCAN_ID: ${{ needs.create_scan_in_IR_Portal.outputs.scan_id }}
      run: echo $SCAN_ID
    - uses: invisirisk/pse-action@v1.0.7
      with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          SCAN_ID: ${{ needs.create_scan_in_IR_Portal.outputs.scan_id }}
    - name: Checkout the code
      uses: actions/checkout@v3
    - name: Install Python dependencies
      run: |
        cd .binder
        cd .binder
        apt-get update && apt-get install -y build-essential python3-dev curl  # Added curl for rustup
        curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y --default-toolchain nightly
        source $HOME/.cargo/env
        rustup default nightly
        rustup component add clippy rustfmt
        cargo --version 
        python3 -m pip install --upgrade pip
        pip install scikit-image
        pip install -r requirements.txt
      
    #-  name: Print GITHUB_RUN_RESULT
    #   run: echo "GITHUB_RUN_RESULT: ${{ env.GITHUB_RUN_RESULT }}"
